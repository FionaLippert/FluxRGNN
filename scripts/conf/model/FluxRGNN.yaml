# @package model
_target_: fluxrgnn.models.FluxRGNN

name: FluxRGNN

coord_dim: 4
embedding_dim: 32
radar_embedding_dim: 8
n_edge_attr: 6

training_coefs:
  #fluxes: 1.0
  x: 1.0
  bird_uv: 0.01
test_vars:
  - x
  - bird_uv
predict_vars:
  - x
  - bird_uv
  - source_sink

env_vars:
  u_q10: 1
  u_q50: 1
  u_q90: 1
  v_q10: 1
  v_q50: 1
  v_q90: 1
  u10: 1
  v10: 1
  tcc: 1
  tp: 1
  sp: 1
  msl: 1
  #t2m: 1
  t_q10: 1
  t_q50: 1
  t_q90: 1
  q_q10: 1
  q_q50: 1
  q_q90: 1
  #sshf: 1
  night: 1
  dusk: 1
  dawn: 1
  dayofyear: 1
  solarpos: 1
  solarpos_dt: 1
  #frac_night_fw: 1
  #frac_night_bw: 1

permute_env_vars: []

n_hidden: 128 

max_t0: ${datasource.tidx_step}
context: 24
horizon: 48
min_horizon: 2
test_horizon: 72

store_fluxes: false

lr: 3e-5
lr_schedulers:
        #- _target_: torch.optim.lr_scheduler.LinearLR
        #  _partial_: true
        #  start_factor: 1e-5
        #  end_factor: 1.0
        #  total_iters: 10
        #- _target_: torch.optim.lr_scheduler.StepLR
        #  _partial_: true
        #  step_size: 50
        #  gamma: 0.65
        #- _target_: torch.optim.lr_scheduler.CosineAnnealingLR
        #  _partial_: true
        #  T_max: 100
        #  eta_min: 1e-5
        #- _target_: torch.optim.lr_scheduler.CosineAnnealingWarmRestarts
        #  _partial_: true
        #  T_0: 10
        #  T_mult: 2
        #  eta_min: 1e-5
        #- _target_: torch.optim.lr_scheduler.CyclicLR
        #  _partial_: true
        #  base_lr: 1e-5
        #  max_lr: 1e-4
        #  step_size_up: 10
        #  step_size_down: 10
        #  mode: triangular2
        #  #gamma: 0.95
        #  cycle_momentum: false
        - _target_: torch.optim.lr_scheduler.ConstantLR
          _partial_: true
          factor: 1.0
          total_iters: ${trainer.max_epochs}
lr_milestones: []
#        - 100
#        - 50
#        - 90
          #- 100 #50
optimizer:
  _target_: torch.optim.Adam
  _partial_: true
  lr: ${model.lr}

use_log_transform: false
log_offset: 0.1
scale: 0.001
length_scale: 0.01 #1.0
flux_scale: ${eval:'${model.scale} * ${model.length_scale}'} #0.00001
transforms:
#  - _target_: fluxrgnn.transforms.LogTransform
#    feature: x
#    offset: ${model.log_offset}
  - _target_: fluxrgnn.transforms.Rescaling
    feature: x
    factor: ${model.scale}
  - _target_: fluxrgnn.transforms.Rescaling
    feature: bird_uv
    factor: ${model.length_scale}
  - _target_: fluxrgnn.transforms.Rescaling
    feature: fluxes
    factor: ${model.flux_scale}
  - _target_: fluxrgnn.transforms.Rescaling
    feature: source_sink
    factor: ${model.scale}
  - _target_: fluxrgnn.transforms.CVMasks
    n_cv_folds: ${task.n_cv_folds}
    cv_fold: ${task.cv_fold}
    seed: ${seed}

dropout_p: 0.0
teacher_forcing: 0.0
teacher_forcing_gamma: 1.0
increase_horizon_rate: 0.1
increase_horizon_start: 0


force_zeros: false #true
root_transformed_loss: false
weight_exponent: 1.0 #0.75
edge_type: hexagons
birds_per_km2: true

regularizer_weight: 0.0 #0.01

activation:
  _target_: torch.nn.ReLU #LeakyReLU

observation_model:
  _target_: fluxrgnn.models.ObservationModel

node_rnn:
  _target_: fluxrgnn.models.NodeLSTM
  _partial_: true

location_encoder:
  _target_: fluxrgnn.models.LocationEncoder
  static_cell_features:
    coords: ${model.coord_dim}
    land_cover: 19
  out_channels: ${model.embedding_dim}
  n_layers: 2 
  dropout_p: ${model.dropout_p}

decoder:
  _target_: fluxrgnn.models.RecurrentDecoder
  node_rnn: ${model.node_rnn}
  n_rnn_layers: 1
  n_hidden: ${model.n_hidden}
  use_encoder: true
  dropout_p: ${model.dropout_p}
  #static_cell_features:
  #  coords: ${model.coord_dim}
  edge_features:
    edge_attr: ${model.n_edge_attr}
  dynamic_cell_features: ${model.env_vars}
  #  env: ${model.n_env}

flux_model:
  #_target_: fluxrgnn.models.Fluxes
  _target_: fluxrgnn.models.NumericalFluxes
  #_target_: fluxrgnn.models.NumericalRadarFluxes
  radar2cell_model:
    _target_: fluxrgnn.models.RadarToCellKNNInterpolation
    k: 10
    radar_variables:
      bird_uv: 2
  static_cell_features:
    coords: ${model.coord_dim}
    #land_cover: 19
  edge_features:
    edge_attr: ${model.n_edge_attr}
  dynamic_cell_features: ${model.env_vars}
  #  env: ${model.n_env}
  length_scale: ${model.length_scale}
  n_hidden: ${model.n_hidden}
  n_fc_layers: 1
  n_graph_layers: 0
  activation: ${model.activation}
  use_log_transform: ${model.use_log_transform}
  log_offset: ${model.log_offset}
  scale: ${model.scale}
  dropout_p: ${model.dropout_p}
  transforms: ${model.transforms}


source_sink_model:
  _target_: fluxrgnn.models.SourceSink
  #_target_: fluxrgnn.models.DeltaMLP
  #model_inputs: []
    #x: 1
    #ground_states: 1
  static_cell_features:
    coords: ${model.coord_dim}
    #land_cover: 19
  dynamic_cell_features: ${model.env_vars}
  #  env: ${model.n_env}
  n_hidden: ${model.n_hidden}
  n_fc_layers: 1 
  activation: ${model.activation}
  use_log_transform: ${model.use_log_transform}
  log_offset: ${model.log_offset}
  scale: ${model.scale}
  dropout_p: ${model.dropout_p}
  transforms: ${model.transforms}


#initial_model:
#  _target_: fluxrgnn.models.InitialStateMLP
#  node_features:
#    coords: ${model.coord_dim}
#  dynamic_cell_features: ${model.env_vars}
#  static_cell_features:
#    coords: ${model.coord_dim}
#  n_hidden: ${model.n_hidden}
#  n_fc_layers: 1
#  activation:
#    _target_: torch.nn.ReLU
#  use_log_transform: ${model.use_log_transform}
#  dropout_p: ${model.dropout_p}
#  transforms: ${model.transforms}

#initial_model:
#  _target_: fluxrgnn.models.ObservationCopy
#  use_log_transform: ${model.use_log_transform}
#  log_offset: ${model.log_offset}
#  scale: ${model.scale}
#  dropout_p: ${model.dropout_p}
#  transforms: ${model.transforms}

initial_model:
  _target_: fluxrgnn.models.RadarToCellKNNInterpolation
  k: 10
  radar_variables:
    x: 1

#ground_model:
#  _target_: fluxrgnn.models.InitialStateMLP
#  static_cell_features:
#    coords: ${model.coord_dim}
#  #dynamic_cell_features:
#  #  env: ${model.n_env}
#  n_hidden: ${model.n_hidden}
#  n_fc_layers: 1
#  activation:
#    _target_: torch.nn.ReLU
#  use_log_transform: ${model.use_log_transform}
#  log_offset: ${model.log_offset}
#  scale: ${model.scale}
#  dropout_p: ${model.dropout_p}
#  transforms: ${model.transforms}

  
encoder:
  _target_: fluxrgnn.models.RecurrentEncoder
  node_rnn: ${model.node_rnn}
  #_target_: fluxrgnn.models.LSTMEncoder
  context: ${model.context}
  n_hidden: ${model.n_hidden}
  n_rnn_layers: 1
  dropout_p: ${model.dropout_p}
  static_cell_features:
      coords: ${model.coord_dim}
  dynamic_cell_features: ${model.env_vars}
  #  env: ${model.n_env}
  location_encoder: ${model.location_encoder}
  radar2cell_model:
    #_target_: fluxrgnn.models.RadarToCellGNN
    #k: 10
    #n_hidden: ${model.radar_embedding_dim}
    #n_fc_layers: 2
    #activation: ${model.activation}
    #dropout_p: ${model.dropout_p}
    #dynamic_radar_features:
    #  x: 1
    #  bird_uv: 2
    #static_cell_features:
    #  coords: ${model.coord_dim}
    #static_radar_features:
    #  coords: ${model.coord_dim}
    #location_encoder: ${model.location_encoder}
    _target_: fluxrgnn.models.RadarToCellKNNInterpolation
    k: 10
    radar_variables:
      x: 1
      bird_uv: 2


boundary_model:
  _target_: fluxrgnn.models.Extrapolation

load_states_from: null
